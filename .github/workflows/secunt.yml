name: Windows - RustDesk (Parallel Downloads)

on:
  workflow_dispatch:

jobs:
  build:
    name: Start Building...
    runs-on: windows-latest
    timeout-minutes: 9999
    steps:
      - name: Downloading & Installing Essentials
        run: |
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/qdyd4p9t6xoabl95n5o3g/Downloads.bat?rlkey=snr74vv1vr8k5suujugvrhjtm&dl=1" -OutFile "Downloads.bat"
          cmd /c Downloads.bat

      - name: Create D:\ directory if it doesn't exist
        run: |
          if (-Not (Test-Path -Path "D:\")) {
            New-Item -Path "D:\" -ItemType Directory
          }

      - name: Download files in parallel with improved error handling
        shell: pwsh
        run: |
          $urls = @(
            @{ Url = "https://a-tushar-82q-fef07c6bf20a.herokuapp.com/540745/SEC504+Videos+2023+%40CyberSecCommunity.part1.rar?hash=AgADTS"; Output = "D:\SEC504.part1.rar" },
            @{ Url = "https://a-tushar-82q-fef07c6bf20a.herokuapp.com/540743/SEC504+Videos+2023+%40CyberSecCommunity.part2.rar?hash=AgADSy"; Output = "D:\SEC504.part2.rar" },
            @{ Url = "https://a-tushar-82q-fef07c6bf20a.herokuapp.com/540733/SEC504+Videos+2023+%40CyberSecCommunity.part3.rar?hash=AgADSi"; Output = "D:\SEC504.part3.rar" }
          )
          
          # Create scriptblocks for each download
          $jobs = @()
          foreach ($item in $urls) {
            $scriptBlock = {
              param($url, $output)
              $maxRetries = 3
              $retryCount = 0
              $downloaded = $false
              
              while (-not $downloaded -and $retryCount -lt $maxRetries) {
                try {
                  Write-Host "Downloading $output (Attempt $($retryCount + 1))"
                  
                  # Use System.Net.Http.HttpClient for better reliability
                  $httpClient = New-Object System.Net.Http.HttpClient
                  $httpClient.Timeout = [TimeSpan]::FromMinutes(10)
                  
                  $response = $httpClient.GetAsync($url).Result
                  $response.EnsureSuccessStatusCode()
                  
                  $content = $response.Content.ReadAsByteArrayAsync().Result
                  [System.IO.File]::WriteAllBytes($output, $content)
                  
                  $httpClient.Dispose()
                  Write-Host "Successfully downloaded $output"
                  $downloaded = $true
                }
                catch {
                  $retryCount++
                  Write-Host "Failed to download $output. Error: $($_.Exception.Message)"
                  if ($retryCount -lt $maxRetries) {
                    Write-Host "Retrying in 10 seconds..."
                    Start-Sleep -Seconds 10
                  } else {
                    Write-Host "Max retries reached for $output"
                    throw
                  }
                }
              }
            }
            
            $job = Start-Job -ScriptBlock $scriptBlock -ArgumentList $item.Url, $item.Output
            $jobs += $job
          }
          
          # Wait for all jobs to complete with timeout
          $timeout = 600 # 10 minutes total timeout
          $jobs | Wait-Job -Timeout $timeout
          
          # Check results and get any errors
          foreach ($job in $jobs) {
            if ($job.State -eq "Completed") {
              Receive-Job -Job $job
            } elseif ($job.State -eq "Failed") {
              Write-Host "Job failed: $($job.ChildJobs[0].JobStateInfo.Reason)"
              Receive-Job -Job $job
            } else {
              Write-Host "Job timed out or is still running: $($job.State)"
              Stop-Job -Job $job
            }
            Remove-Job -Job $job -Force
          }

      - name: Verify downloaded files
        run: |
          echo "Verifying downloaded files..."
          Get-ChildItem -Path "D:\" -Filter "*.rar" | ForEach-Object { 
            echo "$($_.Name): $($_.Length) bytes" 
          }

      - name: Wait for RustDesk to initialize
        run: |
          echo "Waiting for RustDesk services to fully initialize..."
          Start-Sleep -Seconds 45

      - name: Check RustDesk process status
        run: |
          echo "Checking RustDesk processes..."
          tasklist | findstr -i rustdesk
          echo "Checking if RustDesk service is running..."
          sc query "RustDesk"

      - name: Show RustDesk ID (Attempt 1)
        run: |
          echo "Attempting to retrieve RustDesk ID..."
          cmd /c show.bat

      - name: Time Counter
        run: python time.py
